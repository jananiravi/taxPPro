[{"path":"https://sdgamboa.github.io/taxPPro/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Samuel Gamboa Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/articles/bugsigdbr.html","id":"import-bugsigdb-database","dir":"Articles","previous_headings":"","what":"Import BugSigDB database","title":"signatures in bugsigdbr","text":"","code":"data <- importBugSigDB() ## Using cached version from 2022-08-17 13:43:05"},{"path":"https://sdgamboa.github.io/taxPPro/articles/bugsigdbr.html","id":"create-signatrues-with-exact-and-non-exact-taxonomic-level","dir":"Articles","previous_headings":"","what":"Create signatrues with exact and non-exact taxonomic level","title":"signatures in bugsigdbr","text":"","code":"sigs_1 <- getSignatures(     data, tax.id.type = 'taxname', tax.level = 'phylum', exact.tax.level = TRUE )  sigs_2 <- getSignatures(     data, tax.id.type = 'taxname', tax.level = 'phylum', exact.tax.level = FALSE )"},{"path":"https://sdgamboa.github.io/taxPPro/articles/bugsigdbr.html","id":"find-common-signatures-in-both-sets","dir":"Articles","previous_headings":"","what":"Find common signatures in both sets","title":"signatures in bugsigdbr","text":"","code":"common_names <- intersect(names(sigs_1), names(sigs_2)) sig1 <- sigs_1[common_names] sig2 <- sigs_2[common_names]"},{"path":"https://sdgamboa.github.io/taxPPro/articles/bugsigdbr.html","id":"take-one-as-an-example","dir":"Articles","previous_headings":"","what":"Take one as an example","title":"signatures in bugsigdbr","text":"","code":"exact_sig <- sig1[length(sig1)] non_exact_sig <- sig2[length(sig2)] exact_sig ## $`bsdb:609/1/2_colorectal-cancer:CRC_vs_Healthy-Controls-(HC)_DOWN` ## [1] \"Firmicutes\"   \"Fusobacteria\" non_exact_sig ## $`bsdb:609/1/2_colorectal-cancer:CRC_vs_Healthy-Controls-(HC)_DOWN` ## [1] \"Firmicutes\"     \"Actinobacteria\" \"Fusobacteria\""},{"path":"https://sdgamboa.github.io/taxPPro/articles/bugsigdbr.html","id":"how-it-looks-like-in-the-dataframe","dir":"Articles","previous_headings":"","what":"How it looks like in the dataframe","title":"signatures in bugsigdbr","text":"","code":"x <- filter(data, Study == 'Study 609', `Abundance in Group 1` == 'decreased') meta <- x$`MetaPhlAn taxon names` DT::datatable(arrange(data.frame(taxa = meta[[1]])))"},{"path":"https://sdgamboa.github.io/taxPPro/articles/bugsigdbr.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"signatures in bugsigdbr","text":"","code":"sessionInfo() ## R version 4.2.0 (2022-04-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Pop!_OS 22.04 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] dplyr_1.0.9     bugsigdbr_1.3.0 ##  ## loaded via a namespace (and not attached): ##  [1] tidyselect_1.1.2    xfun_0.32           bslib_0.4.0         ##  [4] purrr_0.3.4         vctrs_0.4.1         generics_0.1.3      ##  [7] htmltools_0.5.3     BiocFileCache_2.5.0 yaml_2.3.5          ## [10] utf8_1.2.2          blob_1.2.3          rlang_1.0.4         ## [13] pkgdown_2.0.6       jquerylib_0.1.4     pillar_1.8.0        ## [16] glue_1.6.2          DBI_1.1.3           rappdirs_0.3.3      ## [19] bit64_4.0.5         dbplyr_2.2.1        lifecycle_1.0.1     ## [22] stringr_1.4.0       ragg_1.2.2          htmlwidgets_1.5.4   ## [25] memoise_2.0.1       evaluate_0.16       knitr_1.39          ## [28] fastmap_1.1.0       crosstalk_1.2.0     curl_4.3.2          ## [31] fansi_1.0.3         Rcpp_1.0.9          DT_0.24             ## [34] filelock_1.0.2      cachem_1.0.6        desc_1.4.1          ## [37] jsonlite_1.8.0      systemfonts_1.0.4   fs_1.5.2            ## [40] bit_4.0.4           textshaping_0.3.6   digest_0.6.29       ## [43] stringi_1.7.8       rprojroot_2.0.3     cli_3.3.0           ## [46] tools_4.2.0         magrittr_2.0.3      sass_0.4.2          ## [49] tibble_3.1.8        RSQLite_2.2.15      crayon_1.5.1        ## [52] pkgconfig_2.0.3     ellipsis_0.3.2      assertthat_0.2.1    ## [55] rmarkdown_2.15      httr_1.4.3          rstudioapi_0.13     ## [58] R6_2.5.1            compiler_4.2.0"},{"path":"https://sdgamboa.github.io/taxPPro/articles/spore_shape.html","id":"attribute-with-discrete-characters","dir":"Articles","previous_headings":"","what":"Attribute with discrete characters","title":"Example of upstream and downstream with aerophilicity","text":"","code":"aer <- as_tibble(physiologies('aerophilicity')[[1]]) dim(aer) #> [1] 6398   15 aer_extended <- propagate(aer) #> Getting new species with asr-tax. (Step 1 - upstream). #> Getting new genera with asr-tax. (Step 2 = upstream). #> Getting new species with inh-tax. (Step 3 - downstream) #> Getting new strains with inh-tax (Step 4 - downstream). table(aer$Evidence) #>  #>     exp unknown  #>    1253    5145 table(aer_extended$Evidence) #>  #> asr-tax     exp inh-tax unknown  #>     971    1253   36873    5145"},{"path":"https://sdgamboa.github.io/taxPPro/articles/spore_shape.html","id":"attribute-with-continuous-characters","dir":"Articles","previous_headings":"","what":"Attribute with continuous characters","title":"Example of upstream and downstream with aerophilicity","text":"","code":"ph <- as_tibble(physiologies('optimal ph')[[1]]) ph_extended <- propagate(ph) #> Getting new genera with asr-tax. (Step 2 = upstream). #> Getting new species with inh-tax. (Step 3 - downstream) #> Getting new strains with inh-tax (Step 4 - downstream). table(ph$Evidence) #>  #> exp  #> 886 table(ph_extended$Evidence) #>  #> asr-tax     exp inh-tax  #>     595     886   18752"},{"path":"https://sdgamboa.github.io/taxPPro/articles/spore_shape.html","id":"completeness","dir":"Articles","previous_headings":"","what":"Completeness","title":"Example of upstream and downstream with aerophilicity","text":"","code":"ncbi_taxonomy <- get_ncbi_taxonomy() |>      mutate(strain = ifelse(rank == 'strain', tax_name, NA)) ## mutate call above is just for creating a strain column ## for counts  dim(ncbi_taxonomy) #> [1] 548054     11 head(ncbi_taxonomy) #> # A tibble: 6 × 11 #>   kingdom phylum   class order family genus species NCBI_ID tax_n…¹ rank  strain #>   <chr>   <chr>    <chr> <chr> <chr>  <chr> <chr>   <chr>   <chr>   <chr> <chr>  #> 1 Archaea NA       NA    NA    NA     NA    NA      1935183 Asgard… clade NA     #> 2 Archaea NA       NA    NA    NA     NA    NA      2798909 Candid… phyl… NA     #> 3 Archaea Candida… NA    NA    NA     NA    NA      2798916 Candid… class NA     #> 4 Archaea Candida… Cand… NA    NA     NA    NA      2798922 Candid… order NA     #> 5 Archaea Candida… Cand… Cand… NA     NA    NA      2798928 Candid… fami… NA     #> 6 Archaea Candida… Cand… Cand… Candi… NA    NA      2798934 Candid… genus NA     #> # … with abbreviated variable name ¹​tax_name"},{"path":"https://sdgamboa.github.io/taxPPro/articles/spore_shape.html","id":"get-counts","dir":"Articles","previous_headings":"Completeness","what":"Get counts","title":"Example of upstream and downstream with aerophilicity","text":"","code":"ranks <- c(     'strain', 'species', 'genus', 'family', 'order', 'class', 'phyum', 'kingdom' )  ncbi_counts <- ncbi_taxonomy |>      dplyr::filter(rank %in% ranks) |>      count(rank) |>      set_names(c('Rank', 'n_ncbi'))  ncbi_counts |>      mutate(Rank = factor(Rank, levels = ranks)) |>      ggplot(aes(reorder(Rank, n_ncbi), n_ncbi)) +     geom_col() +     geom_label(aes(label = n_ncbi)) +     labs(         title = 'NCBI totals',         x = 'rank'     ) aer_counts <- aer |>      count(Rank) |>      set_names(c('Rank', 'n_aer')) aer_counts #> # A tibble: 10 × 2 #>    Rank       n_aer #>    <chr>      <int> #>  1 biotype        4 #>  2 genus       1240 #>  3 isolate        3 #>  4 no rank       18 #>  5 serogroup      6 #>  6 serotype       9 #>  7 species     3851 #>  8 strain      1195 #>  9 subspecies    35 #> 10 NA            37 aer_extended_counts <- aer_extended |>      count(Rank) |>      set_names(c('Rank', 'n_aer_extended')) aer_extended_counts  #> # A tibble: 10 × 2 #>    Rank       n_aer_extended #>    <chr>               <int> #>  1 biotype                 4 #>  2 genus                1665 #>  3 isolate                 3 #>  4 no rank                18 #>  5 serogroup               6 #>  6 serotype                9 #>  7 species             18170 #>  8 strain              24295 #>  9 subspecies             35 #> 10 NA                     37"},{"path":"https://sdgamboa.github.io/taxPPro/articles/spore_shape.html","id":"calculate-completeness","dir":"Articles","previous_headings":"","what":"Calculate completeness","title":"Example of upstream and downstream with aerophilicity","text":"","code":"completeness <- reduce(     list(ncbi_counts, aer_counts, aer_extended_counts),     .f = left_join     ) |>      mutate(         aer_completness = n_aer / n_ncbi * 100,         aer_extended_completeness = n_aer_extended / n_ncbi * 100     ) |>      filter(Rank %in% c('strain', 'species', 'genus')) |>      select(Rank, aer_completness, aer_extended_completeness) |>      pivot_longer(         cols = 2:last_col(), names_to = 'type', values_to = 'completeness'     ) completeness #> # A tibble: 6 × 3 #>   Rank    type                      completeness #>   <chr>   <chr>                            <dbl> #> 1 genus   aer_completness                 24.6   #> 2 genus   aer_extended_completeness       33.1   #> 3 species aer_completness                  0.791 #> 4 species aer_extended_completeness        3.73  #> 5 strain  aer_completness                  2.87  #> 6 strain  aer_extended_completeness       58.2"},{"path":"https://sdgamboa.github.io/taxPPro/articles/spore_shape.html","id":"plot-completeness","dir":"Articles","previous_headings":"","what":"Plot completeness","title":"Example of upstream and downstream with aerophilicity","text":"Completeness","code":"completeness |>      ggplot(aes(Rank, completeness)) +      geom_col(aes(fill = type), alpha = 0.5, position = 'dodge') +     labs(         title = \"Completness before and after propagation of annotaions\",         subtitle = 'Completeness was calculated based on the NNCBI',         y = 'Completeness (%)'     ) +     theme_bw() +     theme(         panel.grid.major.x = element_blank()     ) +     scale_fill_manual(         values = c('dodgerblue3', 'firebrick3'),         labels = c('Before propagation', 'After propagation')     ) phys = physiologies() |>      lapply(as_tibble) phys_no_dup <- map(phys, ~ {     .x |> filter_dataset_for_propagation() |>          # remove_taxa_duplicates() |>          ci_to_scores() |>          distinct() }) |>      keep(~!nrow(.x) == 0)  phys_filtered_counts <- map(phys_no_dup, ~ {     counts <- table(.x$Rank)     tibble::tibble(rank =  names(counts), n = as.integer(counts)) }) |>      bind_rows(.id = 'dataset')  phys_filtered_counts |>      ggplot(aes(reorder(dataset, n), n)) +     geom_col(aes(fill = rank)) +     labs(         title = 'Totals across bugphyzz datasets',         x = 'dataset'     ) +     theme(         axis.text.x = element_text(angle = 45, hjust = 1)     ) phys_counts <- map(phys, ~ {     .x <- dplyr::filter(.x, Rank %in% ranks)     counts <- table(.x$Rank)     tibble::tibble(rank =  names(counts), n = as.integer(counts)) }) |>      bind_rows(.id = 'dataset')  phys_counts |>      ggplot(aes(reorder(dataset, n), n)) +     geom_col(aes(fill = rank)) +     labs(         title = 'Totals across bugphyzz datasets',         x = 'dataset'     ) +     theme(         axis.text.x = element_text(angle = 45, hjust = 1)     )"},{"path":"https://sdgamboa.github.io/taxPPro/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Samuel Gamboa. Maintainer.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gamboa S (2022). taxPPro: Taxonomic phylogenetic propagation. R package version 0.1.0, https://github.com/sdgamboa/taxPPro.","code":"@Manual{,   title = {taxPPro: Taxonomic and phylogenetic propagation},   author = {Samuel Gamboa},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/sdgamboa/taxPPro}, }"},{"path":"https://sdgamboa.github.io/taxPPro/index.html","id":"taxppro---taxonomic-and-phylogenetic-propagation","dir":"","previous_headings":"","what":"Taxonomic and phylogenetic propagation","title":"Taxonomic and phylogenetic propagation","text":"provitional package hold functions ASR inheritance bugphyzz","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/calcParentScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate parent scores — calcParentScore","title":"Calculate parent scores — calcParentScore","text":"calcParentScore calculates parent scores bugphyzz dataset.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/calcParentScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate parent scores — calcParentScore","text":"","code":"calcParentScore(df)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/calcParentScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate parent scores — calcParentScore","text":"df data frame. wt use weights dplyr::counts function","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/calcParentScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate parent scores — calcParentScore","text":"data frame.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/ci_to_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert confidence intervals to numeric scores — ci_to_scores","title":"Convert confidence intervals to numeric scores — ci_to_scores","text":".ci_to_scores converts keywords `confidence_interval` column bugphyzz dataset numeric scores, added additional column named `Score`.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/ci_to_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert confidence intervals to numeric scores — ci_to_scores","text":"","code":"ci_to_scores(x)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/ci_to_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert confidence intervals to numeric scores — ci_to_scores","text":"x dataset bugphyzz, e.g., aerophilicity.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/ci_to_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert confidence intervals to numeric scores — ci_to_scores","text":"datafraame. dataframe addtional `Score` column.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Get annotations for children node (downstream) — downstream","title":"Get annotations for children node (downstream) — downstream","text":"Get annotations children node (downstream)","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get annotations for children node (downstream) — downstream","text":"","code":"downstream(df)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get annotations for children node (downstream) — downstream","text":"df data frame bugphyzz","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/downstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get annotations for children node (downstream) — downstream","text":"data frame children nodes annotated","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/filter_dataset_for_propagation.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter datset for phylogenetic propagation — filter_dataset_for_propagation","title":"Filter datset for phylogenetic propagation — filter_dataset_for_propagation","text":"filter_dataset_for_propagation filters rows datasets enough information perfrom ASR Inheritance propagation taxa annotations","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/filter_dataset_for_propagation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter datset for phylogenetic propagation — filter_dataset_for_propagation","text":"","code":"filter_dataset_for_propagation(df, df_name = NULL)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/filter_dataset_for_propagation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter datset for phylogenetic propagation — filter_dataset_for_propagation","text":"df dataset bugphyzz. df_name character string. name dataset","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/filter_dataset_for_propagation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter datset for phylogenetic propagation — filter_dataset_for_propagation","text":"flitered version input df. rows conserved, output NULL warning.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Get children taxa — get_children","title":"Get children taxa — get_children","text":"Get children taxa","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get children taxa — get_children","text":"","code":"get_children(x)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get children taxa — get_children","text":"x vector NCBI IDs","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get children taxa — get_children","text":"dataframe children taxa","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get duplicates — get_duplicates","title":"Get duplicates — get_duplicates","text":"get_duplicates gets duplicated taxa bugphuzz dataset. information useful identifying conflicts annotations different sources.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get duplicates — get_duplicates","text":"","code":"get_duplicates(df, cols = c(\"Taxon_name\", \"NCBI_ID\"), verbose = FALSE)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get duplicates — get_duplicates","text":"df dataframe. cols Columns look duplicates.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get duplicates — get_duplicates","text":"dataframe duplicated rows. duplicates found, function returns NULL value message.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_ncbi_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"get_ncbi_taxonomy — get_ncbi_taxonomy","title":"get_ncbi_taxonomy — get_ncbi_taxonomy","text":"get_ncbi_taxonomy downloads imports full taxonomic classification NCBI database","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_ncbi_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_ncbi_taxonomy — get_ncbi_taxonomy","text":"","code":"get_ncbi_taxonomy(force_download = FALSE)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_ncbi_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_ncbi_taxonomy — get_ncbi_taxonomy","text":"force_download FALSE (default) function uses ncbi taxonomy cache (present). TRUE ncbi taxonomy dowloaded. taxonomy present cache, removed replaced.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_ncbi_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_ncbi_taxonomy — get_ncbi_taxonomy","text":"data frame complete NCBI taxonomy","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parents — get_parents","title":"Get parents — get_parents","text":"get_parents Get's parents vector valid NCBI IDs.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parents — get_parents","text":"","code":"get_parents(x)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parents — get_parents","text":"x vector valid NCBI IDs","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/get_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parents — get_parents","text":"table Parent_NCBI_ID, Parent_name, Parent_rank","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello world\nhello prints ","title":"Hello world\nhello prints ","text":"Hello world hello prints \"Hello, world!\"","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello world\nhello prints ","text":"","code":"hello()"},{"path":"https://sdgamboa.github.io/taxPPro/reference/hello.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hello world\nhello prints ","text":"character string.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/propagate.html","id":null,"dir":"Reference","previous_headings":"","what":"Propagate annotations — propagate","title":"Propagate annotations — propagate","text":"Propagate annotations","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/propagate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propagate annotations — propagate","text":"","code":"propagate(df)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/propagate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propagate annotations — propagate","text":"df data frame bugphyzz.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/propagate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propagate annotations — propagate","text":"data frame extended annotations.","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/remove_taxa_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove taxa duplicates\nremove_taxa_duplicates remove taxa that are duplicated — remove_taxa_duplicates","title":"Remove taxa duplicates\nremove_taxa_duplicates remove taxa that are duplicated — remove_taxa_duplicates","text":"Remove taxa duplicates remove_taxa_duplicates remove taxa duplicated","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/remove_taxa_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove taxa duplicates\nremove_taxa_duplicates remove taxa that are duplicated — remove_taxa_duplicates","text":"","code":"remove_taxa_duplicates(df)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/remove_taxa_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove taxa duplicates\nremove_taxa_duplicates remove taxa that are duplicated — remove_taxa_duplicates","text":"df dataframe imported bugphyzz","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/remove_taxa_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove taxa duplicates\nremove_taxa_duplicates remove taxa that are duplicated — remove_taxa_duplicates","text":"dataframe without duplicated taxa","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/upstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Code used to annotate parent nodes according to the NCBI taxonomy — upstream","title":"Code used to annotate parent nodes according to the NCBI taxonomy — upstream","text":"Code used annotate parent nodes according NCBI taxonomy","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/upstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code used to annotate parent nodes according to the NCBI taxonomy — upstream","text":"","code":"upstream(df)"},{"path":"https://sdgamboa.github.io/taxPPro/reference/upstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code used to annotate parent nodes according to the NCBI taxonomy — upstream","text":"df data frame bugphyzz","code":""},{"path":"https://sdgamboa.github.io/taxPPro/reference/upstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code used to annotate parent nodes according to the NCBI taxonomy — upstream","text":"datta frame parent nodes annotations","code":""}]
